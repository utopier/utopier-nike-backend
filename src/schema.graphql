type Query {
  me: User
  getProduct(id: String!): Product!
  getProducts(
    filter: String
    skip: Int
    take: Int
    orderBy: ProductsOrderByInput
  ): [Product!]!
  searchProduct(term: String!): [Product!]!
  getCart: [Cart]
  getComments(reviewId: String): [Comment]
  getComment(commentId: String): Comment
}

type Mutation {
  signUp(username: String!, email: String!, password: String!): AuthPayload
  editProfile(username: String): User!
  login(email: String!, password: String!): AuthPayload
  toggleLike(productId: String!): toggledLikeResponse!
  createProductInCart(productId: String): CreatedProductInCartResponse
  createReview(title: String!, body: String!, productId: String!): Review!
  updateReview(
    reviewId: String
    username: String
    title: String
    body: String
  ): Boolean
  deleteReview(reviewId: String, username: String): Boolean
  createComment(reviewId: String, text: String): Comment
  updateComment(commentId: String, username: String, text: String): Comment
  deleteComment(commentId: String, username: String): Boolean
  deleteProductInCart(cartId: String): Boolean
}

type Subscription {
  toggledLike: toggledLikeResponse
}

type CreatedProductInCartResponse {
  id: ID
  createdAt: String
  updatedAt: String
  title: String
  subtitle: String
  price: String
  color: String
  sizeId: ID
  productCodeId: Int
  imageUrls: [CreatedProductInCartResponseImgUrl]
}

type CreatedProductInCartResponseImgUrl {
  id: ID
  createdAt: String
  updatedAt: String
  url: String
  productId: ID
}

type toggledLikeResponse {
  status: Toggled
  like: toggledLikeResponseLike
  status: Toggled
  like: toggledLikeResponseLike
}

enum Toggled {
  added
  deleted
  added
  deleted
}

type toggledLikeResponseLike {
  id: ID
  createAt: String
  updatedAt: String
  userId: ID
  productId: ID
  id: ID
  createAt: String
  updatedAt: String
  userId: ID
  productId: ID
}

input ProductsOrderByInput {
  createdAt: Sort
  price: Sort
}

enum Sort {
  asc
  desc
}

type AuthPayload {
  token: String
  user: User
  token: String
  user: User
}

type User {
  id: ID!
  createdAt: String
  updatedAt: String
  username: String!
  email: String!
  password: String!
  cart: [Cart]
  likes: [Like]
  reviews: [Review]
  comments: [Comment]
}

type ProductCode {
  id: ID!
  createdAt: String
  updatedAt: String
  productCode: String
  styleCode: [ColorCode]
}

type ColorCode {
  id: ID!
  createdAt: String
  updatedAt: String
  colorCode: String
  optionColorImgUrl: String
  productCode: ProductCode
}

type ImageUrl {
  id: ID!
  createdAt: String
  updatedAt: String
  url: String
  product: Product
}

type Size {
  id: ID!
  createdAt: String
  updatedAt: String
  twoThreeZ: Boolean
  twoThreeF: Boolean
  twoFourZ: Boolean
  twoFourF: Boolean
  twoFiveZ: Boolean
  twoFiveF: Boolean
  twoSixZ: Boolean
  twoSixF: Boolean
  twoSevenZ: Boolean
  twoSevenF: Boolean
  twoEightZ: Boolean
  twoEightF: Boolean
  twoNineZ: Boolean
  twoNineF: Boolean
  threeZeroZ: Boolean
  threeZeroF: Boolean
  threeOneZ: Boolean
  product: Product
}

type DescriptionPreview {
  id: ID!
  createdAt: String
  updatedAt: String
  title: String
  body: String
  product: Product
}

type Product {
  id: ID!
  createdAt: String
  updatedAt: String
  title: String!
  subtitle: String!
  price: String!
  color: String
  imageUrls: [ImageUrl]
  sizes: Size
  descriptionPreview: DescriptionPreview
  productCode: ProductCode
  likes: [Like!]!
  reviews: [Review!]!
  # ##
  isLiked: Boolean!
  likeCount: Int!
  reviewCount: Int!
}

type Review {
  id: ID!
  createdAt: String
  updatedAt: String
  title: String!
  body: String!
  user: User
  product: Product
  comments: [Comment!]!
  commentCount: Int!
}

type Comment {
  id: ID!
  createdAt: String
  updatedAt: String
  text: String!
  user: User
  review: Review
}

type Cart {
  id: ID!
  createdAt: String
  updatedAt: String
  user: User!
  product: Product!
}

type Like {
  id: ID!
  createdAt: String
  updatedAt: String
  user: User
  product: Product
}
